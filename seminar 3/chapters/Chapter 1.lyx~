#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ociamthesis-lyx
\options a4paper,titlepage
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction 
\end_layout

\begin_layout Standard
Malware such as ransomware once infected need to communicate their respective
 Command & Control (C&C) server.
 To reach out to C&C, malwares rely on domain names generated using Domain
 Generation Algorithm (DGA).
 As shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DGA-Workflow"
plural "false"
caps "false"
noprefix "false"

\end_inset

, attackers registers Algorithmically Generated Domain (AGD) names.
 Once infected, malware tries to contact AGD.
 On successful communication, either malware exfiltrates data to C&C server
 or further infects other hosts in victim's network.
 In case of ransomware attacks malware encrypts victim's data.
 This communication was meant to download further malware from C&C or could
 be to obtain encryption keys for ransomware attacks
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../dga-paper/figures/DGA-Workflow.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:DGA-Workflow"

\end_inset

DGA Workflow
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Malicious domain names could be gibberish such as 
\emph on
ocufxskoiegqvv.com
\emph default
.
 Large number of such requests may not resolve due to absence of NXDomain
 records.
 However, lookup messages for such gibberish domains make it difficult to
 detect malicious domain names from DNS logs.
 Recently, DGAs have become more sophisticated.
 Instead of generating random character based domain names, DGAs generate
 domains based on valid dictionary or wordlist based names such as 
\emph on
scoreadmireluckapplyfitcouple.com
\emph default
.
 Wordlist based names are generated by concatenating two or more valid dictionar
y words.
 They make it further challenging to detect and classify the AGDs amongst
 valid or legitimate domain lookup requests.
 Security administrators tries to blacklist malicious domain names used
 by malware.
 However, this method can be easily bypassed using sophisticated large wordlist
 based domain names.
\end_layout

\begin_layout Standard
Over past decade advances in machine learning, specially in Natural Language
 Processing (NLP) has helped in detecting malicious domain names (AGDs).
 In this paper, we demonstrate the efficacy of deep learning based NLP models
 in detecting malicious domain names as well as predicting the underlying
 algorithm used for generating domain names.
 
\end_layout

\begin_layout Standard
Our main contribution, is the proposed design of AGD detection using Bidirection
al Encoder Representational from Transformer (BERT) based method.
 We empirically demonstrate the efficacy of BERT on detecting malicious
 domain names generated using dictionary based real world Domain Generation
 Algorithm(DGA).
 The proposed design outperforms  state of the art methods of malicious
 domain name on detection by more 9 absolute percentage points.
\end_layout

\end_body
\end_document
